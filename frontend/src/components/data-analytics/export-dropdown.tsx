import React, { useEffect, useState } from 'react';
// import { GoogleSpreadsheet } from 'google-spreadsheet';
// import { JWT } from 'google-auth-library';

type DropDownProps = {
  items: string[];
  showDropDown: boolean;
  toggleDropDown: Function;
  itemSelection: Function;
};

const DropDown: React.FC<DropDownProps> = ({
  items,
  itemSelection,
}: DropDownProps): JSX.Element => {
  const [showDropDown, setShowDropDown] = useState<boolean>(false);

  /**
   * Handle passing the item label
   * back to the parent component
   *
   * @param item  The selected item
   */
  const onClickHandler = (item: string): void => {
    itemSelection(item);
  };

  useEffect(() => {
    setShowDropDown(showDropDown);
  }, [showDropDown]);


  // // Initialize auth - see https://theoephraim.github.io/node-google-spreadsheet/#/guides/authentication
  // const serviceAccountAuth = new JWT({
  //   // env var values here are copied from service account credentials generated by google
  //   // see "Authentication" section in docs for more info
  //   email: process.env.GOOGLE_SERVICE_ACCOUNT_EMAIL,
  //   key: process.env.GOOGLE_PRIVATE_KEY,
  //   scopes: [
  //     'https://www.googleapis.com/auth/spreadsheets',
  //   ],
  // });

  // const { GoogleSpreadsheet } = require("google-spreadsheet");

  // const creds = require("credential.json"); // Please set your credential file.

  // const doc = new GoogleSpreadsheet("##"); // Please set your Spreadsheet ID.

  // const sample = async () => {
  //   await doc.useServiceAccountAuth(creds);
  //   await doc.loadInfo();
  //   const worksheet = doc.sheetsByIndex[0]; // Here, 1st tab on Google Spreadsheet is used.

  //   // This is from your sample value.
  //   const values = [
  //     { a: "123", b: "456" },
  //     { a: "321", b: "654" },
  //   ];
  //   await worksheet.setHeaderRow(["a", "b"]); // This is the header row.
  //   await worksheet.addRows(values); // Your value is put to the sheet.
  // };
  // sample();

  return (
    <div className="">
      {items.map(
        (item: string, index: number): JSX.Element => {
          const isLastItem = index === items.length - 1;
          const roundedClass = isLastItem ? 'rounded-b-lg' : 'border-b';
          return (
            <p
              className={`p-2 bg-white hover:bg-[#0568a0] hover:text-white active:text-white ${roundedClass}`}
              key={index}
              onClick={(): void => {
                onClickHandler(item);
              }}
            >
              {item}
            </p>
          );
        }
      )}
    </div>
  );
};

export default DropDown;
